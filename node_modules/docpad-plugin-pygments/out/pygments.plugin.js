// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
  
  module.exports = function(BasePlugin) {
    var PygmentsPlugin, balUtil, highlightElement, jsdom, pygmentizeSource;
    balUtil = require('bal-util');
    jsdom = require('jsdom');
    pygmentizeSource = function(source, language, next, attempt) {
      var command, errors, result;
      if (attempt == null) {
        attempt = 0;
      }
      result = '';
      errors = '';
      command = ['-f', 'html', '-O', 'encoding=utf-8'];
      if (language) {
        command.unshift(language);
        command.unshift('-l');
      } else {
        command.unshift('-g');
      }
      command.unshift('pygmentize');
      balUtil.spawn(command, {
        stdin: source
      }, function(err, stdout, stderr) {
        if (err) {
          return next(null, err);
        }
        result = stdout || '';
        if (result === '' && attempt < 3) {
          return pygmentizeSource(source, language, next, attempt + 1);
        }
        return next(null, result);
      });
      return this;
    };
    highlightElement = function(window, element, next) {
      var bottomNode, language, matches, source, topNode, _ref, _ref1;
      topNode = element;
      bottomNode = element;
      source = false;
      language = false;
      bottomNode = element;
      while (bottomNode.childNodes.length && ((_ref = String(bottomNode.childNodes[0].tagName).toLowerCase()) === 'pre' || _ref === 'code')) {
        bottomNode = bottomNode.childNodes[0];
      }
      topNode = element;
      while ((_ref1 = topNode.parentNode.tagName.toLowerCase()) === 'pre' || _ref1 === 'code') {
        topNode = topNode.parentNode;
      }
      if (/highlighted/.test(topNode.className)) {
        next();
        return this;
      }
      source = balUtil.removeIndentation(bottomNode.innerHTML);
      language = String(bottomNode.getAttribute('lang') || topNode.getAttribute('lang')).replace(/^\s+|\s+$/g, '');
      if (!language) {
        if (bottomNode.className.indexOf('no-highlight') !== -1) {
          language = false;
        } else {
          matches = bottomNode.className.match(/lang(?:uage)?-(\w+)/);
          if (matches && matches.length === 2) {
            language = matches[1];
          } else {
            if (topNode.className.indexOf('no-highlight') !== -1) {
              language = false;
            } else {
              matches = topNode.className.match(/lang(?:uage)?-(\w+)/);
              if (matches && matches.length === 2) {
                language = matches[1];
              }
            }
          }
        }
      }
      pygmentizeSource(source, language, function(err, result) {
        var resultElInner, resultElWrapper;
        if (err) {
          return next(err);
        }
        if (result) {
          resultElWrapper = window.document.createElement('div');
          resultElWrapper.innerHTML = result;
          resultElInner = resultElWrapper.childNodes[0];
          resultElInner.className += ' highlighted codehilite';
          topNode.parentNode.replaceChild(resultElInner, topNode);
        }
        return next();
      });
      return this;
    };
    return PygmentsPlugin = (function(_super) {

      __extends(PygmentsPlugin, _super);

      function PygmentsPlugin() {
        return PygmentsPlugin.__super__.constructor.apply(this, arguments);
      }

      PygmentsPlugin.prototype.name = 'pygments';

      PygmentsPlugin.prototype.renderDocument = function(opts, next) {
        var extension, file;
        extension = opts.extension, file = opts.file;
        if (file.type === 'document' && extension === 'html') {
          return jsdom.env({
            html: "<html><body>" + opts.content + "</body></html>",
            features: {
              QuerySelector: true
            },
            done: function(err, window) {
              var element, elements, key, tasks, value, _i, _len;
              if (err) {
                return next(err);
              }
              elements = window.document.querySelectorAll('code pre, pre code, .highlight');
              if (elements.length === 0) {
                return next();
              }
              tasks = new balUtil.Group(function(err) {
                if (err) {
                  return next(err);
                }
                opts.content = window.document.body.innerHTML;
                return next();
              });
              tasks.total = elements.length;
              for (key = _i = 0, _len = elements.length; _i < _len; key = ++_i) {
                value = elements[key];
                element = elements.item(key);
                highlightElement(window, element, tasks.completer());
              }
              return true;
            }
          });
        } else {
          return next();
        }
      };

      return PygmentsPlugin;

    })(BasePlugin);
  };

}).call(this);
